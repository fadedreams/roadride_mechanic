helm repo add bitnami https://charts.bitnami.com/bitnami
helm repo update
helm install mongodb bitnami/mongodb --namespace roadride -f mongodb-values.yaml

m@server-o7x4mf:~/roadride_mechanic/k8s$ helm install mongodb bitnami/mongodb --namespace roadride -f ./mongodb-values.yaml
NAME: mongodb
LAST DEPLOYED: Thu Sep 11 14:56:07 2025
NAMESPACE: roadride
STATUS: deployed
REVISION: 1
TEST SUITE: None
NOTES:
CHART NAME: mongodb
CHART VERSION: 16.5.45
APP VERSION: 8.0.13

âš  WARNING: Since August 28th, 2025, only a limited subset of images/charts are available for free.
    Subscribe to Bitnami Secure Images to receive continued support and security updates.
    More info at https://bitnami.com and https://github.com/bitnami/containers/issues/83267

** Please be patient while the chart is being deployed **

MongoDB&reg; can be accessed on the following DNS name(s) and ports from within your cluster:

    mongodb.roadride.svc.cluster.local

To get the root password run:

    export MONGODB_ROOT_PASSWORD=$(kubectl get secret --namespace roadride mongodb -o jsonpath="{.data.mongodb-root-password}" | base64 -d)

To connect to your database, create a MongoDB&reg; client container:

    kubectl run --namespace roadride mongodb-client --rm --tty -i --restart='Never' --env="MONGODB_ROOT_PASSWORD=$MONGODB_ROOT_PASSWORD" --image docker.io/bitnami/mongodb:8.0.13-debian-12-r0 --command -- bash

Then, run the following command:
    mongosh admin --host "mongodb" --authenticationDatabase admin -u $MONGODB_ROOT_USER -p $MONGODB_ROOT_PASSWORD

To connect to your database from outside the cluster execute the following commands:

    kubectl port-forward --namespace roadride svc/mongodb 27017:27017 &
    mongosh --host 127.0.0.1 --authenticationDatabase admin -p $MONGODB_ROOT_PASSWORD

WARNING: There are "resources" sections in the chart not set. Using "resourcesPreset" is not recommended for production. For production installations, please set the following values according to your workload needs:
  - arbiter.resources
  - externalAccess.autoDiscovery.resources
+info https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/


kubectl get sts -n roadride  # mongodb-mongodb 1/1
kubectl get pods -n roadride -w  # Watch for mongodb-mongodb-0 1/1 Running
kubectl get pvc -n roadride  # data-mongodb-mongodb-0 Bound 2Gi RWO standard

export MONGODB_ROOT_PASSWORD=$(kubectl get secret --namespace roadride mongodb -o jsonpath="{.data.mongodb-root-password}" | base64 -d)
echo $MONGODB_ROOT_PASSWORD  # "password"

------install mongosh
sudo apt update
sudo apt install -y gnupg

curl -fsSL https://pgp.mongodb.com/server-8.0.asc | \
sudo gpg -o /usr/share/keyrings/mongodb-server-8.0.gpg \
--dearmor \
--yes

echo "deb [ arch=amd64,arm64 signed-by=/usr/share/keyrings/mongodb-server-8.0.gpg ] https://repo.mongodb.org/apt/ubuntu jammy/mongodb-org/8.0 multiverse" | \
sudo tee /etc/apt/sources.list.d/mongodb-org-8.0.list

sudo apt update
sudo apt install -y mongodb-mongosh
mongosh --version
---------

kubectl exec -it mongodb-mongodb-0 -n roadride -- mongosh admin -u root -p password --eval "rs.status()"

kubectl port-forward --namespace roadride svc/mongodb-mongodb 27017:27017 &
mongosh --host 127.0.0.1 --port 27017 --authenticationDatabase admin -u root -p password --eval "rs.status()"
# Stop: fg; kill %1

#Run RS Status:
mongosh --host 127.0.0.1 --port 27017 --authenticationDatabase admin -u root -p password --eval "rs.status()"

#Test Data Insertion (verify replication to secondary):
mongosh --host 127.0.0.1 --port 27017 --authenticationDatabase admin -u root -p password --eval "use repairdb; db.mechanics.insertOne({name: 'test', skill: 'tires'})"

#Then query secondary (port-forward to specific pod if needed):
kubectl port-forward --namespace roadride pod/mongodb-1 27018:27017 &
mongosh --host 127.0.0.1 --port 27018 --authenticationDatabase admin -u root -p password --eval "use repairdb; db.mechanics.find()"
