services:
  consul:
    image: hashicorp/consul:1.20
    ports:
      - "8500:8500" # Consul HTTP API
      - "8600:8600/udp" # Consul DNS
    command: agent -server -bootstrap-expect=1 -ui -client=0.0.0.0
    environment:
      - CONSUL_LOCAL_CONFIG={"datacenter":"dc1","server":true}
    networks:
      - app-network
    restart: unless-stopped

  jaeger:
    image: jaegertracing/all-in-one:1.58
    ports:
      - "16686:16686" # Jaeger UI
      - "4317:4317"   # OTLP gRPC
      - "4318:4318"   # OTLP HTTP
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - app-network
    restart: unless-stopped

  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    depends_on:
      repair-service:
        condition: service_started
      consul:
        condition: service_started
      jaeger:
        condition: service_started
      logstash:
        condition: service_healthy
    ports:
      - "8081:8081"
    environment:
      - CONSUL_ADDRESS=consul:8500
      - SERVICE_NAME=api-gateway
      - SERVICE_PORT=8081
      - JAEGER_ENDPOINT=http://jaeger:4318/v1/traces
    restart: unless-stopped
    networks:
      - app-network

  repair-service:
    build:
      context: ./repair-service
      dockerfile: Dockerfile
    depends_on:
      mongodb:
        condition: service_started
      consul:
        condition: service_started
      jaeger:
        condition: service_started
      logstash:
        condition: service_healthy
    ports:
      - "8080:8080"
      - "50051:50051"
    environment:
      - CONSUL_ADDRESS=consul:8500
      - SERVICE_NAME=repair-service
      - SERVICE_PORT=8080
      - JAEGER_ENDPOINT=http://jaeger:4318/v1/traces
      - GRPC_PORT=50051
      - MONGO_URI=mongodb://admin:admin@mongodb:27017/repairdb?authSource=admin&replicaSet=rs0
    restart: unless-stopped
    networks:
      - app-network

  mechanic-service:
    build:
      context: ./mechanic-service
      dockerfile: Dockerfile
    depends_on:
      mongodb:
        condition: service_started
      consul:
        condition: service_started
      jaeger:
        condition: service_started
      logstash:
        condition: service_healthy
    ports:
      - "8082:8082"
    environment:
      - CONSUL_ADDRESS=consul:8500
      - SERVICE_NAME=mechanic-service
      - SERVICE_PORT=8082
      - JAEGER_ENDPOINT=http://jaeger:4318/v1/traces
      - MONGO_URI=mongodb://admin:admin@mongodb:27017/repairdb?authSource=admin&replicaSet=rs0
    restart: unless-stopped
    networks:
      - app-network

  mongodb:
    image: mongo:latest
    environment:
      # - MONGO_INITDB_ROOT_USERNAME=admin
      # - MONGO_INITDB_ROOT_PASSWORD=admin
      - MONGO_INITDB_DATABASE=repairdb
    volumes:
      - mongodb_data:/data/db
      - ./init_mechanics.js:/docker-entrypoint-initdb.d/init_mechanics.js:ro
      - ./init_replica.js:/docker-entrypoint-initdb.d/init_replica.js:ro
    ports:
      - "27017:27017"
    command: mongod --replSet rs0
    restart: unless-stopped
    networks:
      - app-network

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.7.1
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - elastic-network
    volumes:
      - es-data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:9200/_cluster/health | grep -q '\"status\":\"green\"\\|\"status\":\"yellow\"'"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s

  kibana:
    image: docker.elastic.co/kibana/kibana:8.7.1
    container_name: kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    networks:
      - elastic-network
    depends_on:
      elasticsearch:
        condition: service_healthy

  logstash:
    image: docker.elastic.co/logstash/logstash:8.7.1
    container_name: logstash
    environment:
      - xpack.monitoring.enabled=false
      - LOGSTASH_PORT=5044
      - ELASTIC_HOST=http://elasticsearch:9200
      - LOGSTASH_INDEX=myapp-logs-%{+YYYY.MM.dd}
    ports:
      - "5044:5044"
      - "9600:9600"
    networks:
      - elastic-network
    volumes:
      - ./logstash-pipeline:/usr/share/logstash/pipeline
    depends_on:
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:9600 | grep -q 'pipeline'"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s

  filebeat:
    image: docker.elastic.co/beats/filebeat:8.7.1
    container_name: filebeat
    volumes:
      - ./filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - go-logs:/var/log/go-app:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - elastic-network
    depends_on:
      logstash:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "filebeat test output"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s

volumes:
  mongodb_data:
    driver: local
  es-data:
    driver: local
  go-logs:
    driver: local

networks:
  app-network:
    driver: bridge
  elastic-network:
    driver: bridge
